import heapq

def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    
    priority_queue = [(0, start)]  # (distance, node)
    
    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)
        
        if current_distance > distances[current_node]:
            continue
        
        for neighbor, weight in graph[current_node]:
            distance = current_distance + weight
            
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))
    
    return distances

def main():
    # Example graph as adjacency list (undirected)
    # Each key is a node, values are (neighbor, weight)
    graph = {
        '1': [('2', 2), ('3', 5)],
        '2': [('1', 2), ('3', 6), ('4', 1)],
        '3': [('1', 5), ('2', 6), ('4', 2)],
        '4': [('2', 1), ('3', 2)]
    }
    
    source = '1'
    distances = dijkstra(graph, source)
    
    print(f"Shortest distances from node {source}:")
    for node in sorted(graph.keys()):
        dist = distances[node]
        if dist == float('inf'):
            print(f"Node {node}: unreachable")
        else:
            print(f"Node {node}: {dist}")

if __name__ == "__main__":
    main()
