import time
import pandas as pd

# Recursive Selection Sort Function
def selection_sort_recursive(arr, start_index=0):
    global comparisons, swaps
    n = len(arr)
    if start_index >= n - 1:
        return arr

    min_index = start_index
    for i in range(start_index + 1, n):
        comparisons += 1
        if arr[i] < arr[min_index]:
            min_index = i

    if min_index != start_index:
        arr[start_index], arr[min_index] = arr[min_index], arr[start_index]
        swaps += 1

    return selection_sort_recursive(arr, start_index + 1)

# Function to measure time, comparisons, swaps
def sort_and_measure_time_recursive(arr):
    global comparisons, swaps
    comparisons = 0
    swaps = 0

    arr_copy = arr.copy()
    start_time = time.time()
    sorted_array = selection_sort_recursive(arr_copy)
    end_time = time.time()

    time_taken = end_time - start_time
    return sorted_array, time_taken, comparisons, swaps

# Test Cases
test_cases = [
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
    [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
    [16, 1, 4, 2, 12, 9, 10, 3, 5, 24, 14, 20, 6, 23, 7, 25, 19, 18, 8, 22, 11, 17, 13, 15, 21],
    [24, 25, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 2],
    [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1]
]

# Running and Printing Results
for i, test_case in enumerate(test_cases):
    print(f"\nTest Case {i + 1} (Recursive):")
    print("Original List:", test_case)

    sorted_array, time_taken, comparisons, swaps = sort_and_measure_time_recursive(test_case)

    print("Sorted List:", sorted_array)

    df = pd.DataFrame([[time_taken, comparisons, swaps]],
                      columns=['Time Taken (seconds)', 'Comparisons', 'Swaps'],
                      index=['Recursive'])

    print("\nSorting Statistics:")
    print(df)
    print("-" * 50)
